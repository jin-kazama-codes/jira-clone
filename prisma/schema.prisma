generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Project {
  key             String    @unique
  name            String
  defaultAssignee String?
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  deletedAt       DateTime?
  id              Int       @id @default(autoincrement())
  cloneChild      Boolean?  @default(false)
  members         Member[]
}

model Member {
  id        Int     @id
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
}

model Issue {
  id             String      @id @default(uuid())
  key            String
  name           String
  description    String?
  status         IssueStatus @default(TODO)
  type           IssueType   @default(TASK)
  sprintPosition Float
  boardPosition  Float       @default(-1)
  parentId       String?
  sprintId       String?
  isDeleted      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deletedAt      DateTime?
  sprintColor    String?
  reporterId     Int?
  assigneeId     Int?
  creatorId      Int?
  projectId      Int?
  comments       Comment[]
  Sprint         Sprint?     @relation(fields: [sprintId], references: [id])

  @@index([sprintId])
}

model Sprint {
  id          String       @id @default(uuid())
  name        String
  description String
  duration    String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  deletedAt   DateTime?
  status      SprintStatus @default(PENDING)
  projectId   Int?
  creatorId   Int?
  issues      Issue[]
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isEdited  Boolean   @default(false)
  issueId   String
  logId     String?
  authorId  Int?
  imageURL  String?
  Issue     Issue?    @relation(fields: [issueId], references: [id])

  @@index([issueId])
}

model DefaultUser {
  name     String
  email    String  @unique(map: "unique_email")
  avatar   String?
  password String? @default("member@f2-fin")
  role     role?   @default(member)
  status   Boolean @default(false)
  id       Int     @id @default(autoincrement())
}

enum IssueType {
  BUG
  TASK
  SUBTASK
  STORY
  EPIC
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum SprintStatus {
  ACTIVE
  PENDING
  CLOSED
}

enum Duration {
  ONE_WEEK
  TWO_WEEKS
  THREE_WEEKS
  FOUR_WEEKS
  CUSTOM
}

enum role {
  admin
  manager
  member
}
